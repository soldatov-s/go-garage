// Code generated by MockGen. DO NOT EDIT.
// Source: ./publisher.go

// Package rabbitmqpub_test is a generated GoMock package.
package rabbitmqpub_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rabbitmqpool "github.com/soldatov-s/go-garage/providers/rabbitmq/pool"
	amqp "github.com/streadway/amqp"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// ExchangeDeclare mocks base method.
func (m *MockConnector) ExchangeDeclare(ctx context.Context, name, kind string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", ctx, name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockConnectorMockRecorder) ExchangeDeclare(ctx, name, kind, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockConnector)(nil).ExchangeDeclare), ctx, name, kind, durable, autoDelete, internal, noWait, args)
}

// Publish mocks base method.
func (m *MockConnector) Publish(ctx context.Context, exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockConnectorMockRecorder) Publish(ctx, exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnector)(nil).Publish), ctx, exchange, key, mandatory, immediate, msg)
}

// StartWatcher mocks base method.
func (m *MockConnector) StartWatcher(ctx context.Context, fn rabbitmqpool.WatcherFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWatcher", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWatcher indicates an expected call of StartWatcher.
func (mr *MockConnectorMockRecorder) StartWatcher(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatcher", reflect.TypeOf((*MockConnector)(nil).StartWatcher), ctx, fn)
}
